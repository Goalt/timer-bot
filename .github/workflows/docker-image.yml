---
name: 'build images'

on:
  release:
    types: [published]

jobs:
  docker:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Get the version
        id: get_version
        run: echo ::set-output name=VERSION::${GITHUB_REF#refs/tags/}

      - name: Set up QEMU
        uses: docker/setup-qemu-action@master
        with:
          platforms: all

      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@master

      - name: Login to DockerHub
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ secrets.DOCKER_USER }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Sanitize repo slug
        uses: actions/github-script@v4
        id: repo_slug
        with:
          result-encoding: string
          script: return 'ghcr.io/${{ github.repository }}'.toLowerCase()

      - name: Build
        uses: docker/build-push-action@v2
        with:
          builder: ${{ steps.buildx.outputs.name }}
          context: .
          file: ./Dockerfile
          platforms: linux/amd64,linux/arm64,linux/ppc64le
          push: true
          tags: 
            ${{ steps.repo_slug.outputs.result }}:${{ steps.get_version.outputs.VERSION }}
      
      - name: Deploy
        run: |
          import os, json, requests

          # Get Version
          versionTag = os.getenv('VERSION_TAG', '')

          # Portainer Creds
          user = os.getenv('PORTAINER_USER', '')
          passw = os.getenv('PORTAINER_PASSW', '')
          stackId = os.getenv('PORTAINER_STACK_ID', '')

          if user == "" or passw == "" or versionTag == "" or stackId == "":
              print("Input parameters are invalid")
              exit(1)

          # Read compose file
          composeFile = f = open("docker-compose.prod.yml")
          compose = f.read()
          composeFile.close()
          
          # Process env
          procEnv = [
              {"name": "IMAGE_VERSION", "value": versionTag},
          ]

          for key in os.environ:
              if key.startswith("DEPLOY_"):
                procEnv.append({"name": key, "value": os.getenv(key)}) 

          # Get JWT token
          data = {
              "password": passw,
              "username":user
          }
          r = requests.post('https://portainer.konkov.xyz/api/auth', data=json.dumps(data))
          jwt = r.json()['jwt']

          data = {
              "env": procEnv,
              "prune": True,
              "stackFileContent": compose
          }
          r = requests.put('https://portainer.konkov.xyz/api/stacks/{}?endpointId=1'.format(stackId), data=json.dumps(data), headers={"Authorization": jwt})
          if r.status_code != 200:
              print("Error", r.status_code, r.text)
              exit(1)

        shell: python {0}
        env:
          VERSION_TAG: ${{ steps.get_version.outputs.VERSION }}
          PORTAINER_USER: ${{ secrets.PORTAINER_USER }} 
          PORTAINER_PASSW: ${{ secrets.PORTAINER_PASSW }} 
          PORTAINER_STACK_ID: ${{ secrets.PORTAINER_STACK_ID }}
          DEPLOY_TIMER_BOT_KEY: ${{ secrets.TIMER_BOT_KEY }}